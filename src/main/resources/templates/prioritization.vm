<!--
Written by Veniture

TODO
İssue Link olsun
-->
$webResourceManager.requireResources("com.veniture.PortfolioManagement:PortfolioManagement-resources")


<!--
Created using JS Bin
http://jsbin.com

Copyright (c) 2019 by venITure

Released under the MIT license: http://jsbin.mit-license.org
-->
<html>
<head>
    <!-- Latest compiled and minified CSS-->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>


    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css" />
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/table-to-json@0.13.0/lib/jquery.tabletojson.min.js" integrity="sha256-AqDz23QC5g2yyhRaZcEGhMMZwQnp8fC6sCZpf+e7pnw=" crossorigin="anonymous"></script>
    <script src="https://raw.githack.com/SortableJS/Sortable/master/Sortable.js"></script><script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>

    <link rel="stylesheet" href="aui/aui-prototyping.css" media="all"/>
    <script src="aui/aui-prototyping.js"></script>

    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-beta.1/dist/css/select2.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-beta.1/dist/js/select2.min.js"></script>

    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/v/dt/dt-1.10.22/datatables.min.css"/>

    <script type="text/javascript" src="https://cdn.datatables.net/v/dt/dt-1.10.22/datatables.min.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/table-to-json@1.0.0/lib/jquery.tabletojson.min.js" integrity="sha256-H8xrCe0tZFi/C2CgxkmiGksqVaxhW0PFcUKZJZo1yNU=" crossorigin="anonymous"></script>

    ##    <script type="text/javascript" src="../js/jquery.ganttChart.js"></script>
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>

    ##    <script type="text/javascript" src="../css/PortfolioManagement.css"></script>

    <meta charset="utf-8">
    <title>Proje Önceliklendirme</title>

    <meta name="decorator" content="atl.general">

    <link rel="stylesheet" href="../css/PortfolioManagement.css" />

    <script>
        // create
        AJS.$(document).ready(function () {
            window.onbeforeunload = null;
            let butceCFstring = "customfield_11000";
            let butceJSONstring = "Bütçe"
            let basTarihCFstring = "customfield_11102";
            let basTarihJSONstring = "BaslangicTarihi"
            let bitTarihCFstring = "customfield_10900";
            let bitTarihJSONstring = "BitisTarihi";

            var htmlButtonOneri=document.getElementById("kaynakKullaniciOnerisi");

            let butonHtmlElement = htmlButtonOneri.cloneNode(true);
            butonHtmlElement = outerHTML(butonHtmlElement)
            console.log("!!!!!" ,butonHtmlElement)

            // var userName = require('git-user-name');
            // console.log("gitusername: ", userName());

            var filterAndIssueKeys = [];
            var defaultIssueList = [];

            var sortable = new Sortable(tableBody, {
                scroll: true,
                scrollSensitivity: 130,
                scrollSpeed: 28,
                handle: 'tr',
                sort: true,
                animation: 150,
                store: {
                    get: function () {
                        var list = []
                        #foreach($pri in $priorityList)
                            list.push($pri)
                        #end
                        return list;
                    }
                },
                onUpdate: function (evt) {
                    updatePriorities("$restriction");
                }
            });

            #foreach($issue in $issueList)
                defaultIssueList.push("$issue.getKey()")
            #end

            var tableIndex = -1;
            $("#auiTable tr").each(function () {
                var issuePriority = $(this).find("td").eq(3);
                var priIndex = 0;
                #foreach($pri in $priorityList)
                    if (priIndex == tableIndex) {
                        var priInt = parseInt("$pri")
                        issuePriority.html(priInt)
                    }
                    priIndex += 1;
                #end
                tableIndex += 1
            })

            var hiddenColumns = []
            var i;
            for (i=8; i<8+parseInt("$customFieldsInProject.size()"); i++){
                hiddenColumns.push(i);
            }

            /* def of DataTable */
            var dataTable = $("#auiTable").DataTable({
                order: [[ 3, "asc" ]],
                bLengthChange: false,
                bPaginate: false,
                bInfo: false,
                bAutoWidth: false,
                bFilter: false,
                pageLength: parseInt($issueList.size()),
                "createdRow": function( row, data, dataIndex ) {
                    $(row).attr('id', 'shadow');
                    $(row).attr('data-id', data[1]);
                },
                columnDefs: [
                    {
                        "targets": hiddenColumns,
                        "visible": false
                    },
                    {
                        "targets": "aui-table-column-kullanici-onerisi",
                        render: function (data, type, row, meta) {
                            return '<div class="aui-group kullaniciOnerButton" id="buttons"><button class="aui-button kullaniciOnerButtonb" id="'+meta.row+'">Kullanıcı Öner</button></div>';
                        }
                    },
                    {
                        'targets': 0,
                        'createdCell':  function (td, cellData, rowData, row, col) {
                            $(td).attr('id', 'issueKey');
                            $(td).attr('name', 'issueKey');
                            $(td).addClass('issueKeyTd');
                        }
                    },
                    {
                        'targets': 1,
                        'createdCell': function (td, cellData, rowData, row, col) {
                            $(td).attr('id', 'issueSummary');
                            $(td).attr('name', 'issueSummary');
                        }
                    },
                    {
                        'targets': 2,
                        'createdCell':  function (td, cellData, rowData, row, col) {
                            $(td).attr('id', 'issueDescription');
                            $(td).attr('name', 'issueDescription');
                            $(td).addClass('might-overflow');
                        }
                    },
                    {
                        'targets': 3,
                        'createdCell':  function (td, cellData, rowData, row, col) {
                            $(td).attr('id', 'issuePriority');
                            $(td).attr('name', 'issuePriority');
                            $(td).addClass('might-overflow');
                        }
                    },
                    {
                        'targets': 4,
                        'createdCell':  function (td, cellData, rowData, row, col) {
                            $(td).attr('id', 'issueButce');
                            $(td).attr('name', 'issueButce');
                            $(td).addClass('might-overflow');
                        }
                    },
                    {
                        'targets': 5,
                        'createdCell':  function (td, cellData, rowData, row, col) {
                            $(td).attr('id', 'issueBaslangicTarihi');
                            $(td).attr('name', 'issueBaslangicTarihi');
                            $(td).addClass('might-overflow');
                        }
                    },
                    {
                        'targets': 6,
                        'createdCell':  function (td, cellData, rowData, row, col) {
                            $(td).attr('id', 'issueBitisTarihi');
                            $(td).attr('name', 'issueBitisTarihi');
                            $(td).addClass('might-overflow');
                        }
                    },
                    {
                        'targets': 7,
                        'createdCell':  function (td, cellData, rowData, row, col) {
                            $(td).attr('id', 'kaynakKullaniciOnerisi');
                            $(td).attr('name', 'kaynakKullaniciOnerisi');
                            $(td).addClass('might-overflow');
                        }
                    }
                ]
            });
            var kaynakAsimTable = $("#kaynakAsimTable").DataTable({
                bLengthChange: false,
                bPaginate: false,
                bInfo: false,
                bAutoWidth: false,
                bFilter: false,
                "ordering": false,
                columnDefs: [
                    {
                        'targets':0,
                        'createdCell': function (td, cellData, rowData, row, col) {
                            $(td).attr('headers', 'basic-fname');
                        }
                    },
                    {
                        'targets':1,
                        'createdCell': function (td, cellData, rowData, row, col) {
                            $(td).attr('headers', 'basic-lname');
                        }
                    }
                ]
            });


            var jsonDataTable = $('#auiTable').tableToJSON();

            console.log("JsonDataTable: ",JSON.stringify(jsonDataTable))

            var butceCount = 0;
            var selectedButce = JSON.parse(JSON.stringify(butceCount))
            var selectedRows = []
            var baslangicTarihiBoolean = true;
            var bitisTarihiBoolean = true;
            var selectedThisRows = []
            var issueAndDates = []

            $('#auiTable tbody').on( 'click', 'td:not(:nth-child(8))', function () {
                console.log("!!clikcked!!")
                $(this).closest('tr').toggleClass('selected');
                console.log($(this).closest('tr'))
                selectedThisRows.push($(this).closest('tr'))
                var selectKey = $(this).closest('tr').children().first().children().text();

                var baslangicKisit = $("#baslangicTarihiInput").val();
                var bitisKisit = $("#bitisTarihiInput").val();
                var baslangicKisitDate = Date.parse(baslangicKisit);
                var bitisKisitDate = Date.parse(bitisKisit);

                if (!selectedRows.includes(selectKey)) {
                    for (var i = 0; i < jsonDataTable.length; i++) {
                        if (jsonDataTable[i]['key'] === selectKey) {
                            if (isNaN(parseInt(jsonDataTable[i]['Bütçe']))) {
                                butceCount = selectedButce
                                alert("Lütfen Bütçe Alanını ekleyin")
                                $(this).removeClass('selected');

                            } else {
                                if (Object.keys(jsonDataTable[i]).includes("Başlangıç Tarihi")  ) {
                                    if (jsonDataTable[i]["Başlangıç Tarihi"] !== "-") {
                                        var issueBaslangicTarihiString = jsonDataTable[i]["Başlangıç Tarihi"];
                                        issueBaslangicTarihiString = issueBaslangicTarihiString.replaceAll("-", "/")
                                        issueBaslangicTarihiString = issueBaslangicTarihiString.replaceAll(".0", "")
                                        var issueBaslangicTarihiDate = Date.parse(issueBaslangicTarihiString);

                                        if(!isNaN(baslangicKisitDate)){
                                            if (issueBaslangicTarihiDate >= baslangicKisitDate) {
                                            } else {
                                                baslangicTarihiBoolean = false;
                                            }
                                        }
                                    }
                                }
                                if (Object.keys(jsonDataTable[i]).includes("Bitiş Tarihi")  ) {
                                    if (jsonDataTable[i]["Bitiş Tarihi"] !== "-") {
                                        var issueBitisTarihiString = jsonDataTable[i]["Bitiş Tarihi"];
                                        issueBitisTarihiString = issueBitisTarihiString.replaceAll("-", "/")
                                        issueBitisTarihiString = issueBitisTarihiString.replaceAll(".0", "")
                                        var issueBitisTarihiDate = Date.parse(issueBitisTarihiString);

                                        if(!isNaN(bitisKisitDate)){
                                            if (issueBitisTarihiDate < bitisKisitDate) {
                                            } else {
                                                bitisTarihiBoolean = false;
                                            }
                                        }
                                    }
                                }


                                butceCount += parseInt(jsonDataTable[i]['Bütçe'])
                                selectedButce = butceCount
                                selectedRows.push(selectKey)
                            }
                        }
                    }
                    if (baslangicTarihiBoolean){
                        if (bitisTarihiBoolean) {
                            $("#issueDurum").text("Olumlu");
                            $("#issueDurum").css("color", "green")
                        }
                        else {
                            $("#issueDurum").text("Olumsuz(Bitiş Tarihi Geçersiz)");
                            $("#issueDurum").css("color", "red")
                        }
                    }
                    else {
                        $("#issueDurum").text("Olumsuz(Başlangıç Tarihi Geçersiz)");
                        $("#issueDurum").css("color", "red")
                    }

                }
                else {
                    var deselectIndex = selectedRows.indexOf(selectKey);
                    if (deselectIndex > -1) {
                        selectedRows.splice(deselectIndex, 1);

                    }
                    for (var i = 0; i < jsonDataTable.length; i++) {
                        if (jsonDataTable[i]['key'] === selectKey) {

                            butceCount -= parseInt(jsonDataTable[i]['Bütçe'])
                            selectedButce = butceCount
                        }
                    }
                }
                $("#butceMiktari").text(butceCount)


                var butceKisit = $("#butceInput").val();

                if (parseInt(butceCount) <= parseInt(butceKisit)){
                    $("#butceMiktari").removeClass("blink")
                    $("#butceMiktari").css("color","green")
                    $("#butceMiktari").css("font-weight","bold")

                }else if(parseInt(butceCount) > parseInt(butceKisit)){
                    $("#butceMiktari").css("color","red")
                    $("#butceMiktari").toggleClass("blink")
                }else{
                    $("#butceMiktari").removeClass("blink")
                    $("#butceMiktari").css("color","black")
                }

            } );


            var baslangicDate;
            var bitisDate;
            updatePriorities("$restriction");
            AJS.$("#customFieldList-select2").auiSelect2();
            AJS.$("#favFilter-select2").auiSelect2({
                allowClear: true
            });
            AJS.$("#constraintList-select2").auiSelect2();
            AJS.$("#baslangicTarihiInput").datePicker({
                overrideBrowserDefault:true,
                dateFormat: "yy-mm-dd",
                inline:true,
                autoclose: true,
                onSelect: function (date) {
                    //datePickerChanged(date)
                    baslangicDate=startDate(date)
                    datePickerFilter(date)
                }
            })
            AJS.$("#bitisTarihiInput").datePicker({
                overrideBrowserDefault:true,
                dateFormat: "yy-mm-dd",
                inline:true,
                autoclose: true,
                onSelect: function (date) {
                    //datePickerChanged(date)
                    bitisDate=endDate(date)
                    datePickerFilter(date)
                }
            })

            var issueKeys =[];
            jsonDataTable.forEach(cell => {
                issueKeys.push(cell.key)
            })

            var butceCFvalues = bulkGetCfValuesFromIssue(issueKeys.join(","), butceCFstring);
            var baslangicTarihiCFvalues = bulkGetCfValuesFromIssue(issueKeys.join(","), basTarihCFstring);
            var bitisTarihiCFvalues = bulkGetCfValuesFromIssue(issueKeys.join(","), bitTarihCFstring);
            addCFVal("Bütçe", butceJSONstring, butceCFvalues);
            addCFVal("Başlangıç Tarihi", basTarihJSONstring, baslangicTarihiCFvalues);
            addCFVal("Bitiş Tarihi", bitTarihJSONstring, bitisTarihiCFvalues);


            var baslangicTarihiArray = baslangicTarihiCFvalues.split(",,,");
            var bitisTarihiArray = bitisTarihiCFvalues.split(",,,");

            google.charts.load('current', {'packages':['gantt']});
            google.charts.setOnLoadCallback(drawChart);

            // Başlangıç Tarihi, basTarihCFstring
            function addCFVal(CFValText, CFstring, CFarray){
                var index;
                dataTable.columns()[0].forEach(innerIndex => {
                    if (dataTable.column(innerIndex).header().textContent === CFValText) {
                        index = innerIndex
                    }
                })
                var array = CFarray.split(",,,");

                dataTable.rows().every(function (rowIdx, tableLoop, rowLoop) {
                    var rowData = this.data();

                    rowData[index] = array[rowLoop]
                    dataTable.row(rowIdx).data(rowData)
                    jsonDataTable[rowLoop][CFstring] = array[rowLoop]

                    this.invalidate()
                });
                dataTable.draw()
                dataTable.column(index).visible(true)
                dataTable.columns.adjust().draw(true);
            }

            function drawChart() {

                var data = new google.visualization.DataTable();
                data.addColumn('string', 'Task ID');
                data.addColumn('string', 'Task Name');
                data.addColumn('string', 'Issue Key');
                data.addColumn('date', 'Start Date');
                data.addColumn('date', 'End Date');
                data.addColumn('number', 'Duration');
                data.addColumn('number', 'Percent Complete');
                data.addColumn('string', 'Dependencies');

                console.log("jsonDataTable: ", jsonDataTable)

                var baslangicDate, bitisDate;
                var ganttRows = []
                var ganttRow = []
                var options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };

                for (var i=0; i<jsonDataTable.length; i++){
                    var jsonRow = jsonDataTable[i];
                    if (baslangicTarihiArray[i] !== "-"){
                        baslangicTarihiArray[i] = baslangicTarihiArray[i].replaceAll("-", "/")
                        baslangicTarihiArray[i] = baslangicTarihiArray[i].replaceAll(".0", "")
                        baslangicDate = new Date(baslangicTarihiArray[i])
                        baslangicDate = new Date(baslangicDate.getFullYear(), baslangicDate.getMonth(), baslangicDate.getDate())
                    }
                    if (baslangicTarihiArray[i] === "-") {
                        baslangicDate = new Date(2020, 10, 1+Math.floor(Math.random() * 10))
                        baslangicDate = new Date(baslangicDate.getFullYear(), baslangicDate.getMonth(), baslangicDate.getDate())
                    }
                    if (bitisTarihiArray[i] !== "-"){
                        bitisTarihiArray[i] = bitisTarihiArray[i].replaceAll("-", "/")
                        bitisTarihiArray[i] = bitisTarihiArray[i].replaceAll(".0", "")
                        bitisDate = new Date(bitisTarihiArray[i])
                        bitisDate = new Date(bitisDate.getFullYear(), bitisDate.getMonth(), bitisDate.getDate())
                    }
                    if (bitisTarihiArray[i] === "-") {
                        bitisDate = new Date(2020, 10, 11+Math.floor(Math.random() * 19))
                        bitisDate = new Date(bitisDate.getFullYear(), bitisDate.getMonth(), bitisDate.getDate())
                    }
                    // console.log(jsonRow['key'], baslangicDate, bitisDate)
                    ganttRow = [jsonRow['key'], jsonRow['key'], jsonRow['key'], baslangicDate, bitisDate, null, 100, null]
                    ganttRows.push(ganttRow)
                }
                data.addRows(ganttRows)
                // data.addRows([
                //     ['Spring 2014', 'Spring 2014', 'Spring 2014',
                //         new Date(2014, 2, 22), new Date(2014, 5, 20), null, 100, null],
                //     ['Summer 2014', 'Summer 2014', 'Summer 2014',
                //         new Date(2014, 5, 21), new Date(2014, 8, 20), null, 100, null],
                //     ['Autumn 2014', 'Autumn 2014', 'Autumn 2014',
                //         new Date(2014, 8, 21), new Date(2014, 11, 20), null, 100, null],
                //     ['Winter 2014', 'Winter 2014', 'Winter 2014',
                //         new Date(2014, 11, 21), new Date(2015, 2, 21), null, 100, null],
                //     ['Spring 2015', 'Spring 2015', 'Spring 2015',
                //         new Date(2015, 2, 22), new Date(2015, 5, 20), null, 100, null]
                // ]);

                var options = {
                    height: 400,
                    gantt: {
                        trackHeight: 30
                    }
                };

                var chart = new google.visualization.Gantt(document.getElementById('gantt'));

                chart.draw(data, options);
            }
            // var gant = $("#gantt")
            // console.log("gantttt:", gant)
            // AJS.$('#gantt').gantt({
            //     source: demoSource,
            //     navigate: "scroll",
            //     scale: "weeks",
            //     maxScale: "months",
            //     minScale: "hours",
            //     itemsPerPage: 10,
            //     scrollToToday: false,
            //     useCookie: true,
            //     onItemClick: function(data) {
            //         alert("Item clicked - show some details");
            //     },
            //     onAddClick: function(dt, rowId) {
            //         alert("Empty space clicked - add an item!");
            //     },
            //     onRender: function() {
            //         if (window.console && typeof console.log === "function") {
            //             console.log("chart rendered");
            //         }
            //     }
            // });
            // AJS.$("#gantt").popover({
            //     selector: ".bar",
            //     title: function _getItemText() {
            //         return this.textContent;
            //     },
            //     container: '.gantt',
            //     content: "Here's some useful information.",
            //     trigger: "hover",
            //     placement: "auto right"
            // });

            AJS.$('#kaydetButton').off().on("click", function (e) {
                var params = new window.URLSearchParams(window.location.search);
                updatePrioritiesInJIRA(params.get('restriction'));
                e.preventDefault();
            });

            AJS.$('#onaylaButton').off().on("click", function (e) {

                // let startDate = "2020-11-16";
                // let endDate = "2020-11-18";
                // let selectedRowKeys = ["APY-1", "APY-2"]
                /* BITIS TARIHI, SECILEN TARIHTEN BIR GUN SONRASI OLARAK GIRILMELI */
                let constraintData = {
                    "startDate" : baslangicDate.toString(),
                    "endDate" : bitisDate.toString(),
                    "selectedRowKeys" : selectedRows,
                    "resource" : "8"
                }
                resourceOverload(constraintData);

                var hiddenHTML = document.getElementById("swAlertKaynakAsimi");
                let html = hiddenHTML.cloneNode(true);
                html.style.visibility = "visible";
                html = outerHTML(html)

                Swal.fire({
                    //title: "<i>Kaynak Durumu</i>",
                    html: html,
                    confirmButtonText: "Kapat",
                    customClass: 'swal-wide'
                }).then((result) => {
                    /* Read more about isConfirmed, isDenied below */
                    if (result.isConfirmed) {
                        kaynakAsimTable.clear().draw();
                    }
                });
                e.preventDefault();
            });
            AJS.$("#loading-spinner").hide();
            AJS.$("#customFieldList-select2").on('select2-selecting', function (e) {
                //Header'ı göster
                AJS.$('#auiTable > thead  th[data-override*="'+e.val+'"]').show();

                // AJS.$("tr").find("th:nth-child(8)").before('#auiTable > thead  th[data-override*="'+e.val+'"]').show();


                var issueKeys =[];
                jsonDataTable.forEach(cell => {
                    issueKeys.push(cell.key)
                })

                var cfValues = bulkGetCfValuesFromIssue(issueKeys.join(","), e.val);
                var index;
                dataTable.columns()[0].forEach(innerIndex => {
                    if (dataTable.column(innerIndex).header().textContent === e.object.text) {
                        index = innerIndex
                    }
                })
                var array = cfValues.split(",,,");

                dataTable.rows().every(function (rowIdx, tableLoop, rowLoop) {
                    var rowData = this.data();
                    rowData[index] = array[rowLoop]
                    dataTable.row(rowIdx).data(rowData)
                    jsonDataTable[rowLoop][e.object.text] = array[rowLoop]
                    this.invalidate()
                });
                dataTable.draw()

                dataTable.column(index).visible(true)
                dataTable.columns.adjust().draw(true);
            });
            AJS.$("#customFieldList-select2").on("select2-removing", function(e) {
                fieldNames = []
                dataTable.settings().columns()[0].forEach(function(index) {
                    fieldNames.push($(dataTable.column(index).header()).text())
                })
                var index;
                // dataTable.columns()[0].forEach(innerIndex => {
                dataTable.rows().every( function ( rowIdx, tableLoop, innerIndex ) {
                    delete jsonDataTable[innerIndex][e.choice.text]
                })
                dataTable.columns()[0].forEach(innerIndex => {
                    if (dataTable.column(innerIndex).header().textContent === e.choice.text){
                        index = innerIndex
                    }
                })

                dataTable.column(index).visible(false)
            });

            var k;

            AJS.$("#favFilter-select2").change(function (e) {

                if(!this.value){
                    var tableBody = $('#tableBody tr');
                    var keys=[]
                    tableBody.each(function () {
                        var cell = $(this)
                        var issueKey = $(this).find("td .issueKey")
                        keys.push(issueKey.text());
                    });
                    jsonDataTable.forEach(data => {
                        if(!keys.includes(data.key)){
                            var rowArray = []
                            rowArray.push('<a href="$baseUrl/browse/' + data.key + '" ' + 'class="issueKey">' + data.key + '</a>');
                            rowArray.push(data.Summary)
                            rowArray.push(data.Description)
                            rowArray.push(data.Priority)
                            rowArray.push(data.Bütçe)
                            rowArray.push(data.BaslangicTarihi)
                            rowArray.push(data.BitisTarihi)
                            rowArray.push(butonHtmlElement)
                            #foreach($cf in $customFieldsInProject)
                                rowArray.push('<td id="$cf.getId()" name="$cf.getId()"  style="display:none;" class="$cf.getId()">-</td>')
                            #end

                            dataTable.row.add(rowArray).draw(true)
                        }

                    } );
                }

            } );

            var beforeSelectedOption = ""
            AJS.$("#favFilter-select2").on('select2-selecting', function (e) {
                var data = e.object.text;
                if (e.object.text === "Filtre eklemek için tıklayın"){
                    if (beforeSelectedOption !== "Filtre eklemek için tıklayın") {
                        filterAndIssueKeys.forEach(filterAndIssueKey => {
                            if (filterAndIssueKey.filterName === beforeSelectedOption) {
                                jsonDataTable.forEach(data => {
                                    if (!filterAndIssueKey.issueKeys.includes(data.key)) {
                                        var rowArray = []
                                        rowArray.push('<a href="$baseUrl/browse/' + data.key + '" ' + 'class="issueKey">' + data.key + '</a>');
                                        rowArray.push(data.Summary)
                                        rowArray.push(data.Description)
                                        rowArray.push(data.Priority)
                                        rowArray.push(data.Bütçe)
                                        rowArray.push(data.BaslangicTarihi)
                                        rowArray.push(data.BitisTarihi)
                                        rowArray.push(butonHtmlElement)
                                        #foreach($cf in $customFieldsInProject)
                                            console.log("custom field: "+"$cf")
                                            rowArray.push('<td id="$cf.getId()" name="$cf.getId()"  style="display:none;" class="$cf.getId()">'+ data["$cf.getName()"] +'</td>')
                                        #end
                                        dataTable.row.add(rowArray).draw(true)
                                    }
                                });
                            }
                        })
                        beforeSelectedOption = "Filtre eklemek için tıklayın"
                    }
                }
                else {
                    beforeSelectedOption = e.object.text
                    jQuery.ajax({
                        url: AJS.params.baseURL + "/rest/florestservice/1.2/rest/favFilterJQL",
                        type: 'POST',
                        data: {
                            jqlQuery: e.object.text
                        },
                        async: false,
                        success: function (response, status, jqXHR) {
                            var filterBoolean = false;
                            filterAndIssueKeys.forEach(filterAndIssueKey => {
                                if (filterAndIssueKey.filterName === data)
                                    filterBoolean = true
                            })
                            if (!filterBoolean) {
                                filterAndIssueKeys.push({
                                    "filterName": data,
                                    "issueKeys": response
                                })
                            }
                            var j;
                            var tableBody = $('#tableBody tr');

                            var partialKeys = []
                            dataTable.rows().every( function ( rowIdx, tableLoop, rowLoop ) {
                                var rowData = this.data();
                                var subStringRowData = rowData[0].substring(0, rowData[0].length-1)
                                var lastIndexSlash = subStringRowData.lastIndexOf(">");
                                var lastIndexBackSlash = subStringRowData.lastIndexOf("<")
                                var partialKey = subStringRowData.substring(lastIndexSlash+1, lastIndexBackSlash)
                                partialKeys.push(partialKey)
                            } );

                            response.forEach(responseKey => {
                                if (!partialKeys.includes(responseKey)){
                                    jsonDataTable.forEach(data => {
                                        if (data.key === responseKey){
                                            var rowArray = []
                                            rowArray.push('<a href="$baseUrl/browse/' + data.key + '" ' + 'class="issueKey">' + data.key + '</a>');
                                            rowArray.push(data.Summary)
                                            rowArray.push(data.Description)
                                            rowArray.push(data.Priority)
                                            rowArray.push(data.Bütçe)
                                            rowArray.push(data.BaslangicTarihi)
                                            rowArray.push(data.BitisTarihi)
                                            rowArray.push(butonHtmlElement)
                                            // rowArray.push(data.Created)
                                            // rowArray.push(data.Due)
                                            #foreach($cf in $customFieldsInProject)
                                                rowArray.push('<td id="$cf.getId()" name="$cf.getId()"  style="display:none;" class="$cf.getId()">'+ data["$cf.getName()"] +'</td>')
                                            #end

                                            dataTable.row.add(rowArray).draw(true)
                                        }
                                    })
                                }
                            })
                            tableBody.each(function () {
                                var cell = $(this)
                                var issueKey = $(this).find("td .issueKey")
                                var deleteBoolean = true;
                                for (j = 0; j < response.length; j++) {
                                    if (response[j] === issueKey.text()) {
                                        deleteBoolean = false;
                                    } else {
                                    }
                                }
                                if (deleteBoolean) {
                                    dataTable.row(cell).remove().draw();
                                }
                            })

                            partialKeys = []
                            dataTable.rows().every( function ( rowIdx, tableLoop, rowLoop ) {
                                var rowData = this.data();
                                var subStringRowData = rowData[0].substring(0, rowData[0].length-1)
                                var lastIndexSlash = subStringRowData.lastIndexOf(">");
                                var lastIndexBackSlash = subStringRowData.lastIndexOf("<")
                                var partialKey = subStringRowData.substring(lastIndexSlash+1, lastIndexBackSlash)
                                partialKeys.push(partialKey)
                            } );
                        },
                        error: function (response) {
                            console.log("errorjql: ", response)
                        }
                    })
                }
            });

            AJS.$("#constraintList-select2").on('select2-selecting', function (e) {
                if (e.object.text === "Bütçe"){
                    $("#butceInput").css("visibility", "visible");
                    $("#butceLabel").css("visibility", "visible");
                }
                else if (e.object.text === "Başlangıç Tarihi"){
                    $("#baslangicTarihiInput").css("visibility", "visible");
                    $("#baslangicTarihiLabel").css("visibility", "visible");
                    $("#tarihIconBas").css("visibility", "visible");
                }
                else if (e.object.text === "Bitiş Tarihi"){
                    $("#bitisTarihiInput").css("visibility", "visible");
                    $("#bitisTarihiLabel").css("visibility", "visible");
                    $("#tarihIconBit").css("visibility", "visible");
                }
            });

            AJS.$("#constraintList-select2").on('select2-removing', function (e) {
                if (e.choice.text === "Bütçe"){
                    $("#butceInput").val("");
                    $("#butceMiktari").css("color","black");
                    $("#butceInput").css("visibility", "hidden");
                    $("#butceLabel").css("visibility", "hidden");
                }
                else if (e.choice.text === "Başlangıç Tarihi"){
                    $("#baslangicTarihiInput").css("visibility", "hidden");
                    $("#baslangicTarihiLabel").css("visibility", "hidden");
                    $("#tarihIconBas").css("visibility", "hidden");
                }
                else if (e.choice.text === "Bitiş Tarihi"){
                    $("#bitisTarihiInput").css("visibility", "hidden");
                    $("#bitisTarihiLabel").css("visibility", "hidden");
                    $("#tarihIconBit").css("visibility", "hidden");
                }
            });


            function datePickerChanged(date){
                baslangicTarihiBoolean = true;
                bitisTarihiBoolean = true;
                selectedThisRows.forEach(selectedRow => {
                    var selectKey = selectedRow.children().first().children().text();
                    var baslangicKisit = $("#baslangicTarihiInput").val();
                    var bitisKisit = $("#bitisTarihiInput").val();
                    var baslangicKisitDate = Date.parse(baslangicKisit);
                    var bitisKisitDate = Date.parse(bitisKisit);
                    for (var i = 0; i < jsonDataTable.length; i++) {
                        if (jsonDataTable[i]['key'] === selectKey) {
                            if (isNaN(parseInt(jsonDataTable[i]['Bütçe']))) {
                                butceCount = selectedButce
                                alert("Lütfen Bütçe Alanını ekleyin")
                                $(this).removeClass('selected');

                            } else {
                                if (Object.keys(jsonDataTable[i]).includes("Başlangıç Tarihi")  ) {
                                    if (jsonDataTable[i]["Başlangıç Tarihi"] !== "-") {
                                        var issueBaslangicTarihiString = jsonDataTable[i]["Başlangıç Tarihi"];
                                        issueBaslangicTarihiString = issueBaslangicTarihiString.replaceAll("-", "/")
                                        issueBaslangicTarihiString = issueBaslangicTarihiString.replaceAll(".0", "")
                                        var issueBaslangicTarihiDate = Date.parse(issueBaslangicTarihiString);
                                        if(!isNaN(baslangicKisitDate)){
                                            if (issueBaslangicTarihiDate >= baslangicKisitDate) {
                                            } else {
                                                baslangicTarihiBoolean = false;
                                            }
                                        }
                                    }
                                }
                                if (Object.keys(jsonDataTable[i]).includes("Bitiş Tarihi")  ) {
                                    if (jsonDataTable[i]["Bitiş Tarihi"] !== "-") {
                                        var issueBitisTarihiString = jsonDataTable[i]["Bitiş Tarihi"];
                                        issueBitisTarihiString = issueBitisTarihiString.replaceAll("-", "/")
                                        issueBitisTarihiString = issueBitisTarihiString.replaceAll(".0", "")
                                        var issueBitisTarihiDate = Date.parse(issueBitisTarihiString);

                                        if(!isNaN(bitisKisitDate)){
                                            if (issueBitisTarihiDate < bitisKisitDate) {
                                            } else {
                                                bitisTarihiBoolean = false;
                                            }
                                        }
                                    }
                                }


                                butceCount += parseInt(jsonDataTable[i]['Bütçe'])
                                selectedButce = butceCount
                                selectedRows.push(selectKey)
                            }
                        }
                    }
                    if (baslangicTarihiBoolean){
                        if (bitisTarihiBoolean) {
                            $("#issueDurum").text("Olumlu");
                            $("#issueDurum").css("color", "green")
                        }
                        else {
                            $("#issueDurum").text("Olumsuz(Bitiş Tarihi Geçersiz)");
                            $("#issueDurum").css("color", "red")
                        }
                    }
                    else {
                        $("#issueDurum").text("Olumsuz(Başlangıç Tarihi Geçersiz)");
                        $("#issueDurum").css("color", "red")
                    }
                })
            }
            function datePickerFilter(date){

                console.log("-------datePickerFilter---------")
                var baslangicKisit = $("#baslangicTarihiInput").val();
                var bitisKisit = $("#bitisTarihiInput").val();

                baslangicKisit=baslangicKisit+" 00:00:00"
                var baslangicKisitFixedDate=new Date(baslangicKisit)

                bitisKisit=bitisKisit+" 00:00:00"
                var bitisKisitFixedDate=new Date(bitisKisit)

                var baslangicKisitDate = Date.parse(baslangicKisitFixedDate);
                baslangicKisitDate=baslangicKisitDate/1000;

                var bitisKisitDate = Date.parse(bitisKisitFixedDate);
                bitisKisitDate=bitisKisitDate/1000;

                for (var i = 0; i < jsonDataTable.length; i++) {
                    if (jsonDataTable[i]["BaslangicTarihi"] !== "-") {
                        var issueBaslangicTarihiString = jsonDataTable[i]["BaslangicTarihi"];
                        issueBaslangicTarihiString = issueBaslangicTarihiString.replaceAll("-", "/")
                        issueBaslangicTarihiString = issueBaslangicTarihiString.replaceAll(".0", "")
                        var issueBaslangicTarihiDate = Date.parse(issueBaslangicTarihiString);
                        issueBaslangicTarihiDate=issueBaslangicTarihiDate/1000;


                        if(!isNaN(baslangicKisitDate)){

                            if ( issueBaslangicTarihiDate >= baslangicKisitDate) {

                                var tableBody = $('#tableBody tr');
                                var keys=[]
                                tableBody.each(function () {
                                    var cell = $(this)
                                    var issueKey = $(this).find("td .issueKey")
                                    keys.push(issueKey.text())
                                })

                                var flag=false;
                                if (!keys.includes(jsonDataTable[i]["key"])){
                                    flag=true;
                                    console.log("flag: "+flag)
                                }
                                if(flag){
                                    console.log("flag true, push edilcek")

                                    jsonDataTable.forEach(data => {
                                        if (jsonDataTable[i]["key"]===(data.key)){
                                            console.log("eklenecek satır jsondatatable da bulundu")
                                            var rowArray=[]
                                            rowArray.push('<a href="$baseUrl/browse/' + data.key + '" ' + 'class="issueKey">' + data.key + '</a>');
                                            rowArray.push(data.Summary)
                                            rowArray.push(data.Description)
                                            rowArray.push(data.Priority)
                                            rowArray.push(data.Bütçe)
                                            rowArray.push(data.BaslangicTarihi)
                                            rowArray.push(data.BitisTarihi)
                                            rowArray.push(butonHtmlElement)
                                            #foreach($cf in $customFieldsInProject)
                                                rowArray.push('<td id="$cf.getId()" name="$cf.getId()"  style="display:none;" class="$cf.getId()">'+ data["$cf.getName()"] +'</td>')
                                            #end
                                            dataTable.row.add(rowArray).draw()

                                        }
                                    })

                                }


                            } else {
                                console.log("else -- silinecek  "+ jsonDataTable[i]["key"])
                                var tableBody = $('#tableBody tr');
                                tableBody.each(function () {
                                    var cell = $(this)
                                    var issueKey = $(this).find("td .issueKey")
                                    if (jsonDataTable[i]["key"] === issueKey.text()) {
                                        dataTable.row(cell).remove().draw();
                                    } else {
                                    }

                                })
                            }
                        }
                        else{
                            console.log("date is not a number")
                        }

                    }

                    if (jsonDataTable[i]["BitisTarihi"] !== "-") {
                        var issueBitisTarihiString = jsonDataTable[i]["BitisTarihi"];
                        issueBitisTarihiString = issueBitisTarihiString.replaceAll("-", "/")
                        issueBitisTarihiString = issueBitisTarihiString.replaceAll(".0", "")
                        var issueBitisTarihiDate = Date.parse(issueBitisTarihiString);
                        issueBitisTarihiDate=issueBitisTarihiDate/1000;

                        if(!isNaN(bitisKisitDate)){

                            if($("#baslangicTarihiInput").val() == "") {
                                if ( issueBitisTarihiDate <= bitisKisitDate) {

                                    var tableBody = $('#tableBody tr');
                                    var keys=[]
                                    tableBody.each(function () {
                                        var cell = $(this)
                                        var issueKey = $(this).find("td .issueKey")
                                        keys.push(issueKey.text())
                                    })

                                    var flag=false;
                                    if (!keys.includes(jsonDataTable[i]["key"])){
                                        flag=true;
                                        console.log("flag: "+flag)
                                    }
                                    if(flag){

                                        jsonDataTable.forEach(data => {
                                            if (jsonDataTable[i]["key"]===(data.key)){
                                                console.log("eklenecek satır jsondatatable da bulundu")
                                                var rowArray=[]
                                                rowArray.push('<a href="$baseUrl/browse/' + data.key + '" ' + 'class="issueKey">' + data.key + '</a>');
                                                rowArray.push(data.Summary)
                                                rowArray.push(data.Description)
                                                rowArray.push(data.Priority)
                                                rowArray.push(data.Bütçe)
                                                rowArray.push(data.BaslangicTarihi)
                                                rowArray.push(data.BitisTarihi)
                                                rowArray.push(butonHtmlElement)
                                                #foreach($cf in $customFieldsInProject)
                                                    rowArray.push('<td id="$cf.getId()" name="$cf.getId()"  style="display:none;" class="$cf.getId()">'+ data["$cf.getName()"] +'</td>')
                                                #end
                                                dataTable.row.add(rowArray).draw()
                                            }
                                        })

                                    }


                                }
                                else {
                                    console.log("else -- silinecek  "+ jsonDataTable[i]["key"])
                                    var tableBody = $('#tableBody tr');
                                    tableBody.each(function () {
                                        var cell = $(this)
                                        var issueKey = $(this).find("td .issueKey")
                                        if (jsonDataTable[i]["key"] === issueKey.text()) {
                                            dataTable.row(cell).remove().draw();
                                        } else {
                                        }

                                    })
                                }
                            }else {
                                if ( issueBitisTarihiDate <= bitisKisitDate) {

                                }else{
                                    console.log("else -- silinecek  "+ jsonDataTable[i]["key"])
                                    var tableBody = $('#tableBody tr');
                                    tableBody.each(function () {
                                        var cell = $(this)
                                        var issueKey = $(this).find("td .issueKey")
                                        if (jsonDataTable[i]["key"] === issueKey.text()) {
                                            dataTable.row(cell).remove().draw();
                                        } else {
                                        }

                                    })
                                }
                            }


                        }else{
                            console.log("date is not a number")
                        }

                    }

                }

            }

            function maxEndIssueDate(selectedRows){
                console.log("-----------maxEndIssueDate----------")
                endDates=[]

                for(var i=0; i<selectedRows.length; i++){
                    for (var j = 0; j < jsonDataTable.length; j++) {
                        if (jsonDataTable[j]['key'] === selectedRows[i]) {

                            var issueBitişTarihiString = jsonDataTable[j]["Bitiş Tarihi"];
                            issueBitişTarihiString = issueBitişTarihiString.replaceAll("-", "/")
                            issueBitişTarihiString = issueBitişTarihiString.replaceAll(".0", "")
                            var issueBitişTarihiDate = Date.parse(issueBitişTarihiString)/1000;

                            endDates.push(issueBitişTarihiDate);
                        }
                    }
                }

                var maxEndDate=Math.max(...endDates);

                var justDate;
                for (var j = 0; j < jsonDataTable.length; j++) {
                    var issueBitişTarihiStringOrj = jsonDataTable[j]["Bitiş Tarihi"];
                    var issueBitişTarihiString = jsonDataTable[j]["Bitiş Tarihi"];
                    issueBitişTarihiString = issueBitişTarihiString.replaceAll("-", "/")
                    issueBitişTarihiString = issueBitişTarihiString.replaceAll(".0", "")
                    var issueBitişTarihiDate = Date.parse(issueBitişTarihiString)/1000;


                    if(issueBitişTarihiDate === maxEndDate) {

                        var date=new Date(Date.parse(issueBitişTarihiString))
                        date.setDate(date.getDate()+1)

                        var day=date.getDate()
                        var month=date.getMonth()+1
                        var year=date.getFullYear()
                        var incrementedDate=year+"-"+month+"-"+day;

                        justDate=incrementedDate;
                    }
                }

                return justDate;
            }
            function minStartIssueDate(selectedRows){
                startDates=[]

                for(var i=0; i<selectedRows.length; i++){
                    for (var j = 0; j < jsonDataTable.length; j++) {
                        if (jsonDataTable[j]['key'] === selectedRows[i]) {

                            var issueBaşlangıçTarihiString = jsonDataTable[j]["Başlangıç Tarihi"];
                            issueBaşlangıçTarihiString = issueBaşlangıçTarihiString.replaceAll("-", "/")
                            issueBaşlangıçTarihiString = issueBaşlangıçTarihiString.replaceAll(".0", "")
                            var issueBaşlangıçTarihiDate = Date.parse(issueBaşlangıçTarihiString)/1000;


                            startDates.push(issueBaşlangıçTarihiDate);
                        }
                    }
                }
                minStartDate=Math.min(...startDates)
                var justDate;
                for (var j = 0; j < jsonDataTable.length; j++) {

                    var issueBaşlangıçTarihiStringOrj = jsonDataTable[j]["Başlangıç Tarihi"];
                    var issueBaşlangıçTarihiString = jsonDataTable[j]["Başlangıç Tarihi"];
                    issueBaşlangıçTarihiString = issueBaşlangıçTarihiString.replaceAll("-", "/")
                    issueBaşlangıçTarihiString = issueBaşlangıçTarihiString.replaceAll(".0", "")
                    var issueBaşlangıçTarihiDate = Date.parse(issueBaşlangıçTarihiString)/1000;

                    if(issueBaşlangıçTarihiDate === minStartDate) {
                        justDate = issueBaşlangıçTarihiStringOrj.split(" ")
                    }
                }

                return justDate[0];
            }


            AJS.$('#temizleButton').on( 'click', function () {
                $("tr").removeClass("selected");
                $("#butceMiktari").removeClass("blink");
                selectedRows=[];
                butceCount=0;

                $("#butceMiktari").text(butceCount).css("color","black");
                $("#issueDurum").text("").css("color","black");

                AJS.$("#kaynak").text("");
            });


            // AJS.$('.kullaniciOnerButtonb').on("click", function(){
            //     var hiddenHTML = document.getElementById("swAlert");
            //     let html = hiddenHTML.cloneNode(true);
            //     html.style.visibility = "visible";
            //     html = outerHTML(html)
            //
            //     Swal.fire({
            //         title: "<i>Title</i>",
            //         html: html,
            //         confirmButtonText: "V <u>redu</u>",
            //     });
            // })
            AJS.$('#auiTable tbody').on('click', '.kullaniciOnerButtonb', function (){
                var hiddenHTML = document.getElementById("swAlert");
                let html = hiddenHTML.cloneNode(true);
                html.style.visibility = "visible";
                html = outerHTML(html)

                Swal.fire({
                    title: "<i>Title</i>",
                    html: html,
                    confirmButtonText: "V <u>redu</u>",
                });
            })

            function outerHTML(node){
                return node.outerHTML || new XMLSerializer().serializeToString(node);
            }

            function updatePrioritiesInJIRA(gmyOrBirim) {
                var table = $('#auiTable').tableToJSON({
                    ignoreEmptyRows : true,
                    onlyColumns: [0,1]
                    //Bu sıralama önemli
                }); // Convert the table into a javascript object

                var priority = "$Priority";


                jQuery.ajax({
                    url: AJS.params.baseURL + "/rest/florestservice/1.2/rest/setPriorityCfValuesInJira",
                    type: 'POST',
                    data: {
                        jsontable: JSON.stringify(table),
                        gmyOrBirim : gmyOrBirim
                    },
                    async: true,
                    beforeSend: function () {
                        console.log("234 beforeSend")
                    },
                    complete: function (response) {
                        console.log("234 complete")
                    },
                    error: function (response) {
                        console.log("setPriorityCfValuesInJira has finished with ERROR !!!");
                    },
                    success: function (response, status, jqXHR) {
                        console.log("setPriorityCfValuesInJira is successful");
                        window.location.reload();
                    }
                });
            }
            function bulkGetCfValuesFromIssue(issueKeys, customfieldId){
                var value="-";
                jQuery.ajax({
                    url: AJS.params.baseURL + "/rest/florestservice/1.2/rest/bulkGetCfValueFromIssue",
                    type: 'POST',
                    data: {
                        issueKey: issueKeys,
                        customFieldId: customfieldId
                    },
                    async: false,
                    beforeSend: function () {
                        console.log("178 beforeSend")
                    },
                    error : function (response) {
                        value= "-";
                    },
                    success: function (response, status, jqXHR) {
                        console.log("getCfValueFromIssue complete");
                        window.scrollTo({
                            left: 20000,top: 300,
                            behavior: 'smooth',
                        });
                        value= response;
                    }
                });
                return value;
            }
            function updatePriorities(restriction) {
                var i = 0;
                var tableBody = AJS.$('#tableBody > tr');
                tableBody.each(function () {
                    if (restriction === "gmy") {
                        AJS.$(this).find(".gmyPriority").text(i + 1);
                    } else if (restriction === "dp") {
                        AJS.$(this).find(".birimOncelik").text(i + 1);
                    }else {
                        AJS.$(this).find(".birimOncelik").text(i + 1);
                        AJS.$(this).find(".gmyPriority").text(i + 1);
                    }
                    i++;
                });
                console.log("Priorities are updated (Not in JIRA DB))");
            }
            function resourceOverload(constraintData) {
                let value="";
                jQuery.ajax({
                    url: AJS.params.baseURL + "/rest/florestservice/1.2/rest/resourceOverload",
                    type: 'POST',
                    data: constraintData,
                    async: false,
                    error : function (response) {
                        console.log("resourceOverloadError: ", response)
                        value= "-";
                    },
                    success: function (response, status, jqXHR) {
                        if(response === "" || response === " "){
                            AJS.$("#kaynakAsimTable").css("visibility","hidden")
                            AJS.$("#kaynakAsimi").text("Seçilen projeler için kaynak aşımı bulunmamaktadır.");
                        }else{
                            AJS.$("#kaynakAsimTable").css("visibility","visible")
                            var responseArr=[];
                            responseArr = response.split(" ");
                            console.log("!-! response: "+ response)
                            console.log("!-! responseArr: "+responseArr);
                            for(var i=0; i<responseArr.length;i++){
                                var nameProject = [];
                                nameProject = responseArr[i].split(",")
                                var justName=nameProject[0];
                                nameProject[0]='<span class="aui-icon aui-icon-small aui-iconfont-person" ></span>'+justName

                                kaynakAsimTable.row.add(nameProject).draw(true)
                            }
                        }

                    }
                });
                return value;
            }
            function startDate(date){
                console.log("Başlangıc date: "+date)
                var date=new Date(date)
                date.setDate(date.getDate())

                var day=date.getDate()
                var month=date.getMonth()+1
                var year=date.getFullYear()
                var startDateString=year+"-"+month+"-"+day;
                console.log("startDateString: "+startDateString)

                return startDateString;
            }
            function endDate(date){
                console.log("Bitiş date: "+date)
                var day = new Date(date);
                console.log("day: "+day);
                return date;

                // var nextDay = new Date(day);
                // nextDay.setDate(day.getDate()+1);
                // var day=nextDay.getDate();
                // var month = nextDay.getMonth()+1;
                // var year= nextDay.getFullYear()
                // console.log (year+"-"+month+"-"+day)
                //
                //
                // var endDateString=year+"-"+month+"-"+day;
                // console.log("endDateString: "+endDateString)
                //
                // return endDateString;
            }

        });
        function myFunction() {
            var dots = document.getElementById("dots");
            var moreText = document.getElementById("more");
            var btnText = document.getElementById("myBtn");

            if (dots.style.display === "none") {
                dots.style.display = "inline";
                btnText.innerHTML = "Daha fazla";
                moreText.style.display = "none";
            } else {
                dots.style.display = "none";
                btnText.innerHTML = "Daha az";
                moreText.style.display = "inline";
            }
        }
    </script>


</head>
<body style="background-color: #F4F5F7">
    #if( $issues.isEmpty() )
    <div class="aui-group">
        <div class="aui-help aui-help-empty-state">
            <div class="aui-help-content">
                <h1>Proje Önceliklendirme</h1>
                <p>Önceliklendirme yapılacak proje bulunamadı.</p>
            </div>
        </div>
    </div>
    #else
    <div class="aui-group">
        <div class="aui-help aui-help-empty-state">
            <div class="aui-help-content">
                <h1>Proje Önceliklendirme</h1>
                <p style="font-size: small">Projeleri sürekle-bırak yöntemi ile istediğiniz sıraya taşıyınız. Önceliklendirme bittikten sonra kaydet tuşuna basınız.<span id="dots">...</span><span id="more">Bütçe veya tarih kısıtı belirlemek için öncelikle tabloya bu alanları ekleyin, sonrasında kısıt alanı ekleyerek belirlediğiniz değerleri girin.Tablodan proje seçebilmeniz için bütçe alanının tabloda bulunması gerekmektedir.</span></p>

                <a style="font-size: small" onclick="myFunction()" id="myBtn">Daha fazla</a>
            </div>

        </div>

    </div>


    <div class="card row" style="margin-left: 15px;padding-left: 0px;margin-right: 20px;">
        <div class="card-body" style="margin-left: -20px;">

            <div>
                <div>
                    <div class="col-xs-6 col-md-2">
                        <div class="aui-group">
                            <div class="aui-item" id="#select2-customFields">
                                <form class="aui">
                                    <select id="customFieldList-select2" data-placeholder="Alan eklemek için tıklayın" multiple>
                                        <option value=""></option>
                                        #foreach($cf in $customFieldsInProject)
                                            <option value="$cf.getId()">$cf.getName()</option>
                                        #end
                                        ##                                <option id="projectLeader" name="projectLeader" value="projectLeader">Proje Lideri</option>
                                    </select>
                                </form>
                            </div>
                        </div>
                    </div>
                    <div class="col-xs-6 col-md-4">
                        <div class="aui-group">
                            <div class="aui-item" id="#select2-favFilters">
                                <form class="aui">
                                    <select id="favFilter-select2" data-placeholder="Filtre eklemek için tıklayın" size="1" >
                                        <option value=""></option>
                                        #foreach($favFilter in $favouriteFilters)
                                            <option value="$favFilter">$favFilter <a href="#" id="remove-fav-filter-single-select" class="select2-search-choice-close" tabindex="-1"></a></option>
                                        #end
                                    </select>
                                </form>
                            </div>
                        </div>
                    </div>
                    <div class="col-xs-6 col-md-6">
                        <div class="aui-group">
                            <div class="aui-item" id="#select2-constraint">
                                <form class="aui">
                                    <select id="constraintList-select2" data-placeholder="Kısıt eklemek için tıklayın" multiple>
                                        <option></option>
                                        <option value="butce">Bütçe</option>
                                        <option value="baslangicTarihi">Başlangıç Tarihi</option>
                                        <option value="bitisTarihi">Bitiş Tarihi</option>
                                    </select>
                                    <form class="aui">
                                        <div class="col-xs-6 col-md-4">
                                            <label for="text-input" id="butceLabel" style="visibility: hidden;">Bütçe </label>
                                            <input class="text" type="text" id="butceInput" name="butceInput" style="visibility: hidden;">
                                        </div>
                                        <div class="col-xs-6 col-md-4">
                                            <label for="text-input" id="baslangicTarihiLabel" style="visibility: hidden;">Başlangıç tarihi <span class="aui-icon aui-icon-small aui-iconfont-calendar" id="tarihIconBas" style="visibility: hidden;"/></label>
                                            <input class="text" type="text" id="baslangicTarihiInput" name="baslangicTarihiInput" class="aui-date-picker" id="demo-range-1" type="date" autocomplete="off" style="visibility: hidden;">

                                        </div>
                                        <div class="col-xs-6 col-md-4">
                                            <label for="text-input" id="bitisTarihiLabel" style="visibility: hidden;">Bitiş tarihi <span class="aui-icon aui-icon-small aui-iconfont-calendar" id="tarihIconBit" style="visibility: hidden;"/></label>
                                            <input class="text" type="text" id="bitisTarihiInput" name="bitisTarihiInput" class="aui-date-picker" id="demo-range-1" type="date" autocomplete="off" style="visibility: hidden;">

                                        </div>
                                    </form>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div style="margin-left: 15px;">
                <label style="display:inline">Toplam Bütçe</label>
                &nbsp;
                <aui-badge id="butceMiktari" style="font-size: 14px; display: inline;"></aui-badge>
            </div>
        </div>
    </div>


    <div class="aui-group">
        <div id="loading-spinner" class="custom-card-style">
            <p>Loading results...</p>
            <aui-spinner size="large"></aui-spinner>
        </div>
    </div>


    <div class="row" style="margin-left:0px;">
##        <div>
##            <label style="float:left; display:inline">Toplam Bütçe</label>
##            &nbsp;
##            <!--<p id="butceMiktari" style="display:inline"></p>-->
##            <aui-badge id="butceMiktari" style="font-size: 14px; display: inline;"></aui-badge>
##        </div>

        ##            <div style="float: right; padding-left: 20px; padding-right: 30px;">
        ##                <label style="display: inline">Tarih Geçerlilik Durumu: </label>
        ##                <!--<p id="issueDurum" style="display: inline"></p>-->
        ##                <aui-badge id="issueDurum" style="font-size: 14px; display: inline;"></aui-badge>
        ##            </div>
        ##            <div style="float: right; padding-left: 60px; padding-right: 30px;">
        ##                <label style="display: inline">Kaynak Durumu: </label>
        ##                <aui-badge id="kaynak" style="font-size: 14px; display: inline;"></aui-badge>
        ##            </div>            ##            <div style="float: right; padding-left: 20px; padding-right: 30px;">
        ##            ##                <label style="display: inline">Tarih Geçerlilik Durumu: </label>
        ##            ##                <!--<p id="issueDurum" style="display: inline"></p>-->
        ##            ##                <aui-badge id="issueDurum" style="font-size: 14px; display: inline;"></aui-badge>
        ##            ##            </div>
        ####            <div style="float: right; padding-left: 60px; padding-right: 30px;">
        ####                <label style="display: inline">Kaynak Durumu: </label>
        ####                <aui-badge id="kaynak" style="font-size: 14px; display: inline;"></aui-badge>
        ####            </div>
    </div>

    <div class="aui-group list-group" id="tableDiv">
        <table class="aui aui-table-list" id="auiTable" >
            <thead>
            <tr id="tableHeader">
                <th class="aui-table-column-issue-key" data-override="key"  id="row1" style="width: 8%;">Kayıt Anahtarı</th>
                <th data-override="Summary" id="row1">Özet</th>
                <th class="aui-table-column-unsortable" data-override="Description"  id="row1">Açıklama</th>
                <th class="aui-table-column-priority" data-override="Priority"  id="row1" style="width: 6%;">Öncelik</th>
                <th class="aui-table-column-butce" data-override="Bütçe"  id="row1" style="width: 6%;">Bütçe</th>
                <th class="aui-table-column-baslangic-tarihi" data-override="BaslangicTarihi"  id="row1" style="width: 10%;">Başlangıç Tarihi</th>
                <th class="aui-table-column-bitis-tarihi" data-override="BitisTarihi"  id="row1" style="width: 10%;">Bitiş Tarihi</th>
                <th class="aui-table-column-kullanici-onerisi" data-override="KullaniciOnerisi"  id="row1" style="width: 10%;">Öneri</th>
                #foreach($cf in $customFieldsInProject)
                    <th id="row1" style="width: 8%;" data-override="$cf.getId()">$cf.getName()</th>
                #end
            </tr>
            </thead>

            <tbody id="tableBody">
                #foreach( $issue in $issueList )
                <tr id="shadow" data-id="$issue.getSummary()">
                    <td id="issueKey" name="issueKey" class="issueKeyTd"><a href="$baseUrl/browse/$issue.getKey()" class="issueKey">$issue.getKey()</a></td>
                    <td id="issueSummary" name="issueSummary">$issue.getSummary()</td>
                    <td id="issueDescription" name="issueDescription" class="might-overflow">
                        #if ( !$issue.getDescription() )
                            -
                        #else
                            $issue.getDescription()
                        #end
                    </td>
                    <td id="issuePriority" name="issuePriority" class="might-overflow">-</td>
                    <td id="issueButce" name="issueButce" class="might-overflow">-</td>
                    <td id="issueBaslangicTarihi" name="issueBaslangicTarihi" class="might-overflow">-</td>
                    <td id="issueBitisTarihi" name="issueBitisTarihi" class="might-overflow">-</td>
                    <td id="kaynakKullaniciOnerisi" name="kaynakKullaniciOnerisi" class="might-overflow">
                        <div class="aui-group kullaniciOnerButton" id="buttons">
                            <button class="aui-button kullaniciOnerButtonb" >Kullanıcı Öner</button>
                        </div>
                    </td>
                    ##                    <td id="issueCreated" name="issueCreated" class="might-overflow">$issue.getCreated()</td>
                    ##                    <td id="issueDue" name="issueDue" class="might-overflow">
                    ##                        #if ( !$issue.getDueDate() )
                    ##                            -
                    ##                        #else
                    ##                            $issue.getDueDate()
                    ##                        #end
                    ##                    </td>
                    #foreach($cf in $customFieldsInProject)
                        ##                        <td id="$cf.getId()" name="$cf.getId()"  style="display:none;" class="$cf.getId()">-</td>
                        <td id="$cf.getId()" name="$cf.getId()" class="$cf.getId()">-</td>
                    #end
                    ##                    #foreach($lead in $projectLeadList)
                    ##                        <td id="projectLeader" name="projectLeader">-</td>
                    ##                    #end

                </tr>
                #end
            </tbody>
        </table>
        <div>
            <div class="aui-group" id="buttons" >
                <button class="aui-button" id="temizleButton" style="float: left;">Seçimi Temizle</button>
                <button class="aui-button" id="onaylaButton" style="float:left;">Kaynak Aşım Durumu</button>
                <button class="aui-button aui-button-primary" id="kaydetButton" style="float: right;">Sıralamayı Kaydet</button>
            </div>
##            <div class="col-xs-6 col-md-1" style="padding-left:15px; float: left;">
##                <div class="aui-group" id="buttons">
##                    <button class="aui-button" id="temizleButton">Seçimi Temizle</button>
##                </div>
##            </div>
        </div>
    </div>

    <div class="gantt" name="gantt" id="gantt"></div>
    <div class="row" id="swAlert" style="margin-top:50px; visibility:hidden">
        <div class="col-xs-5 col-md-1" style="padding-left:15px">
            <form>
                <select id="mySelect" multiple>
                    <option>Apple</option>
                    <option>Pear</option>
                    <option>Banana</option>
                    <option>Orange</option>
                </select>
            </form>
        </div>
        <div class="col-xs-5 col-md-1" style="padding-left:15px">
            <form>
                <select id="mySelect2" multiple>
                    <option>Apple</option>
                    <option>Pear</option>
                    <option>Banana</option>
                    <option>Orange</option>
                </select>
            </form>
        </div>
    </div>
    <div id="swAlertKaynakAsimi" style="margin-top:50px; visibility:hidden">
        <div class="aui-message aui-message-info">
            <p class="title">
                <strong>Kaynak Aşım Durumu</strong>
            </p>
            <p id="kaynakAsimi"></p>
        </div>

        <table class="aui" id="kaynakAsimTable">
            <thead>
            <tr>
                <th id="basic-fname">Kaynak</th>
                <th id="basic-lname">Proje</th>
            </tr>
            </thead>
##            <tbody>
##            <tr>
##                <td headers="basic-fname"><span class="aui-icon aui-icon-small aui-iconfont-person" ></span></td>
##                <td headers="basic-lname"></td>
##            </tr>
##            </tbody>
        </table>
    </div>

    #end




</body>
</html>


