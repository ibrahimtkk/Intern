<!--
Written by Veniture

TODO
İssue Link olsun
-->
$webResourceManager.requireResources("com.veniture.PortfolioManagement:PortfolioManagement-resources")


<!--
Created using JS Bin
http://jsbin.com

Copyright (c) 2019 by venITure

Released under the MIT license: http://jsbin.mit-license.org
-->
<html>
<head>
    <!-- Latest compiled and minified CSS-->

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css" />
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/table-to-json@0.13.0/lib/jquery.tabletojson.min.js" integrity="sha256-AqDz23QC5g2yyhRaZcEGhMMZwQnp8fC6sCZpf+e7pnw=" crossorigin="anonymous"></script>
    <script src="https://raw.githack.com/SortableJS/Sortable/master/Sortable.js"></script><script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>

    <link rel="stylesheet" href="aui/aui-prototyping.css" media="all"/>
    <script src="aui/aui-prototyping.js"></script>

    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-beta.1/dist/css/select2.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-beta.1/dist/js/select2.min.js"></script>

    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/v/dt/dt-1.10.22/datatables.min.css"/>

    <script type="text/javascript" src="https://cdn.datatables.net/v/dt/dt-1.10.22/datatables.min.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/table-to-json@1.0.0/lib/jquery.tabletojson.min.js" integrity="sha256-H8xrCe0tZFi/C2CgxkmiGksqVaxhW0PFcUKZJZo1yNU=" crossorigin="anonymous"></script>


    <meta charset="utf-8">
    <title>Proje Önceliklendirme</title>

    <meta name="decorator" content="atl.general">

    <style>
        #content {
            margin: 12px;
        }

        #tableBody>tr {
            cursor: grab;
        }
        #tableBody>tr :active {
            cursor: grabbing;
        }

        #loading-spinner {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }

        .might-overflow {
            text-overflow: ellipsis;
            overflow : hidden;
            white-space: nowrap;
        }

        .might-overflow:hover {
            text-overflow: clip;
            white-space: normal;
            word-break: break-all;
        }

        #loading-spinner aui-spinner {
            margin: 1em;
        }

        .custom-card-style {
            border-radius: 3px;
            box-shadow:
                    0 1px 1px rgba(9, 30, 66, 0.25),
                    0 0 1px 0 rgba(9, 30, 66, 0.31);
            margin: 0 auto;
            padding: 10px;
            width: 20em;
        }

        td {
            min-width:15px;
            max-width:100px;
        }
        #row1{
            font-weight: bold;
            text-align: left;
            font-size: 13px;
        }
        #shadow:hover {
            background-color: #f5f5f5;
            padding: 10px;
        }
        .aui-help-content{
            margin-bottom: 60px;
        }
        .row{
            margin-bottom: 60px;
        }
        #buttons{
            text-align: center;
            margin-left:auto;
        }
        #auiTable{
            margin-left: auto;
            margin-right: auto;
            position: center;
            margin-bottom: 130px;
            border-collapse: separate;
            border-spacing: 0 10px;
            width: 100%;
        }
        #auiTable td, #auiTable tr{
            border: 1px solid #ddd;
        }
        /*#auiTable tr:nth-child(even){background-color: #f2f2f2;}*/

        /*table.dataTable tbody tr.selected {*/
        /*    color: #6dc4e7;*/
        /*}*/

        #auiTable tr:hover {background-color: #ddd;}

        #auiTable th {
            padding-top: 12px;
            padding-bottom: 12px;
            text-align: left;
            background-color: #0747a6;
            color: #deebff;
        }
        table.dataTable.no-footer {
            border-bottom: none;
        }
        table.dataTable thead th, table.dataTable thead td {
            border-bottom: none;
        }

        .dataTables_wrapper .dataTables_filter {
            float: left;
        }
        .dataTables_wrapper .dataTables_filter input {
            font-weight: normal;
        }

        label {
            color: #6b778c;
        }


    </style>

    <script>
        // create
        AJS.$(document).ready(function () {
            window.onbeforeunload = null;

            var filterAndIssueKeys = [];
            var defaultIssueList = [];
            // var fieldNames =  [], cells = []

            var sortable = new Sortable(tableBody, {
                scroll: true,
                scrollSensitivity: 130,
                scrollSpeed: 28,
                handle: 'tr',
                sort: true,
                animation: 150,
                store: {
                    get: function () {
                        var list = []
                        #foreach($pri in $priorityList)
                            list.push($pri)
                        #end
                        return list;
                    }
                },
                onUpdate: function (evt) {
                    updatePriorities("$restriction");
                }
            });

            #foreach($issue in $issueList)
                defaultIssueList.push("$issue.getKey()")
            #end

            var tableIndex = -1;
            $("#auiTable tr").each(function () {
                var issuePriority = $(this).find("td").eq(3);
                var priIndex = 0;
                #foreach($pri in $priorityList)
                    if (priIndex == tableIndex) {
                        var priInt = parseInt("$pri")
                        issuePriority.html(priInt)
                    }
                    priIndex += 1;
                #end
                tableIndex += 1
            })

            var hiddenColumns = []
            var i;
            for (i=6; i<6+parseInt("$customFieldsInProject.size()"); i++){
                hiddenColumns.push(i);
            }

            /* def of DataTable */
            var dataTable = $("#auiTable").DataTable({
                order: [[ 3, "asc" ]],
                bLengthChange: false,
                bPaginate: false,
                bInfo: false,
                bAutoWidth: false,
                // "bFilter": false,
                pageLength: parseInt($issueList.size()),
                columnDefs: [
                    {
                        "targets": hiddenColumns,
                        "visible": false
                    }
                ]
            });

            var tempDataTable = $('#auiTable').tableToJSON();
            var jsonDataTable = $('#auiTable').tableToJSON();


            var kaynakCount = 0;
            var selectedKaynak = JSON.parse(JSON.stringify(kaynakCount))
            var selectedRows = []
            $('#auiTable tbody').on( 'click', 'tr', function () {
                $(this).toggleClass('selected');
                var selectKey = $(this).children().first().children().text();
                if (!selectedRows.includes(selectKey)) {

                    for (var i = 0; i < jsonDataTable.length; i++) {
                        if (jsonDataTable[i]['key'] === selectKey) {

                            if (isNaN(parseInt(jsonDataTable[i]['Kaynak']))) {
                                console.log("3 if içindeyim")
                                kaynakCount = selectedKaynak
                                alert("Lütfen Kaynak Alanını ekleyin")
                                $(this).removeClass('selected');

                            } else {

                                kaynakCount += parseInt(jsonDataTable[i]['Kaynak'])
                                selectedKaynak = kaynakCount
                                selectedRows.push(selectKey)

                            }
                        }
                    }

                }
                else {

                    var deselectIndex = selectedRows.indexOf(selectKey);
                    if (deselectIndex > -1) {
                        selectedRows.splice(deselectIndex, 1);
                    }
                    for (var i = 0; i < jsonDataTable.length; i++) {
                        if (jsonDataTable[i]['key'] === selectKey) {

                            kaynakCount -= parseInt(jsonDataTable[i]['Kaynak'])
                            selectedKaynak = kaynakCount
                        }
                    }
                }
                $("#kaynakMiktari").text(kaynakCount)
                console.log("selectedRows: ", selectedRows)
                console.log("kaynak>Count: ", kaynakCount)
                console.log("selectedKaynak: ", selectedKaynak)
            } );

            // console.log("111")
            //
            // dataTable
            //         .on( 'select', function ( e, dt, type, indexes ) {
            //             var rowData = dataTable.rows( indexes ).data().toArray();
            //             console.log("rowDataSelect:", rowData, e, dt, type, indexes)
            //         } )
            //         .on( 'deselect', function ( e, dt, type, indexes ) {
            //             var rowData = dataTable.rows( indexes ).data().toArray();
            //             console.log("rowDataDeselect: ", rowData, e, dt, type, indexes)
            //         } );
            //
            // $('#auiTable').on( 'select', function ( e, dt, type, indexes ) {
            //     console.log("seleeect")
            //     if ( type === 'row' ) {
            //         kod=dataTable.rows( {selected:true} ).data();
            //         kodorder=kod[0][0];
            //         alert('orders kod is:'+kodorder);
            //     }
            // });


            updatePriorities("$restriction");

            AJS.$("#customFieldList-select2").auiSelect2();
            AJS.$("#favFilter-select2").auiSelect2();

            AJS.$('#kaydetButton').off().on("click", function (e) {
                var params = new window.URLSearchParams(window.location.search);
                console.log("restriction = "+ params.get('restriction'));
                updatePrioritiesInJIRA(params.get('restriction'));
                e.preventDefault();
            });
            AJS.$("#loading-spinner").hide();
            AJS.$("#customFieldList-select2").on('select2-selecting', function (e) {
                //Header'ı göster
                AJS.$('#auiTable > thead  th[data-override*="'+e.val+'"]').show();

                var issueKeys =[];
                jsonDataTable.forEach(cell => {
                    issueKeys.push(cell.key)
                })

                var cfValues=bulkGetCfValuesFromIssue(issueKeys.join(","), e.val);

                var index;
                dataTable.columns()[0].forEach(innerIndex => {
                    if (dataTable.column(innerIndex).header().textContent === e.object.text){
                        index = innerIndex
                    }
                })
                var array=cfValues.split(",,,");

                dataTable.rows().every( function ( rowIdx, tableLoop, rowLoop ) {
                    var rowData = this.data();
                    rowData[index] = array[rowLoop]
                    dataTable.row(rowIdx).data(rowData)
                    jsonDataTable[rowLoop][e.object.text] = array[rowLoop]
                    this.invalidate()
                } );
                dataTable.draw()

                dataTable.column( index ).visible( true )
                dataTable.columns.adjust().draw( true );
            });
            AJS.$("#customFieldList-select2").on("select2-removing", function(e) {
                fieldNames = []
                dataTable.settings().columns()[0].forEach(function(index) {
                    fieldNames.push($(dataTable.column(index).header()).text())
                })
                var index;
                dataTable.columns()[0].forEach(innerIndex => {
                    delete jsonDataTable[innerIndex][e.choice.text]
                    if (dataTable.column(innerIndex).header().textContent === e.choice.text){
                        index = innerIndex
                    }
                })

                dataTable.column(index).visible(false)
            });

            var k;
            AJS.$("#favFilter-select2").on("select2-removing", function(e) {
                filterAndIssueKeys.forEach(filterAndIssueKey => {
                    console.log("filter: ", filterAndIssueKey)
                    if (filterAndIssueKey.filterName ===  e.choice.text ){
                        // console.log("temp: ", tempDataTable)
                        tempDataTable.forEach(data => {
                            if (!filterAndIssueKey.issueKeys.includes(data.key)) {
                                var rowArray = []
                                rowArray.push('<a href="$baseUrl/browse/' + data.key + '" ' + 'class="issueKey">' + data.key + '</a>');
                                rowArray.push(data.Summary)
                                rowArray.push(data.Description)
                                rowArray.push(data.Priority)
                                rowArray.push(data.Created)
                                rowArray.push(data.Due)
                                #foreach($cf in $customFieldsInProject)
                                    rowArray.push('<td id="$cf.getId()" name="$cf.getId()"  style="display:none;" class="$cf.getId()">-</td>')
                                #end
                                dataTable.row.add(rowArray).draw(true)
                            }
                        } );
                    }
                })
            });
            var beforeSelectedOption = ""
            AJS.$("#favFilter-select2").on('select2-selecting', function (e) {
                var data = e.object.text;
                console.log("before: ", beforeSelectedOption)

                if (e.object.text === "Bir seçenek seçin"){
                    console.log("1.if")
                    if (beforeSelectedOption !== "Bir seçenek seçin") {
                        console.log("2.if")
                        filterAndIssueKeys.forEach(filterAndIssueKey => {
                            if (filterAndIssueKey.filterName === beforeSelectedOption) {
                                tempDataTable.forEach(data => {
                                    if (!filterAndIssueKey.issueKeys.includes(data.key)) {
                                        var rowArray = []
                                        rowArray.push('<a href="$baseUrl/browse/' + data.key + '" ' + 'class="issueKey">' + data.key + '</a>');
                                        rowArray.push(data.Summary)
                                        rowArray.push(data.Description)
                                        rowArray.push(data.Priority)
                                        rowArray.push(data.Created)
                                        rowArray.push(data.Due)
                                        #foreach($cf in $customFieldsInProject)
                                            rowArray.push('<td id="$cf.getId()" name="$cf.getId()"  style="display:none;" class="$cf.getId()">-</td>')
                                        #end
                                        dataTable.row.add(rowArray).draw(true)
                                    }
                                });
                            }
                        })
                        beforeSelectedOption = "Bir seçenek seçin"
                    }
                }
                else {
                    beforeSelectedOption = e.object.text
                    jQuery.ajax({
                        url: AJS.params.baseURL + "/rest/florestservice/1.2/rest/favFilterJQL",
                        type: 'POST',
                        data: {
                            jqlQuery: e.object.text
                        },
                        async: false,
                        success: function (response, status, jqXHR) {
                            filterAndIssueKeys.push({
                                "filterName": data,
                                "issueKeys": response
                            })
                            console.log("filterand: ", filterAndIssueKeys)
                            var j;
                            var tableBody = $('#tableBody tr');
                            tableBody.each(function () {
                                var cell = $(this)
                                var issueKey = $(this).find("td .issueKey")
                                var deleteBoolean = true;
                                for (j = 0; j < response.length; j++) {
                                    if (response[j] === issueKey.text()) {
                                        deleteBoolean = false;
                                    } else {
                                    }
                                }
                                if (deleteBoolean) {
                                    dataTable.row(cell).remove().draw();
                                }
                            })
                        },
                        error: function (response) {
                            console.log("errorjql: ", response)
                        }
                    })
                }
            });

            function updatePrioritiesInJIRA(gmyOrBirim) {
                var table = $('#auiTable').tableToJSON({
                    ignoreEmptyRows : true,
                    onlyColumns: [0,1]
                    //Bu sıralama önemli
                }); // Convert the table into a javascript object

                var priority = "$Priority";
                console.log("priority: ", priority)

                console.log("table: ", JSON.stringify(table));

                jQuery.ajax({
                    url: AJS.params.baseURL + "/rest/florestservice/1.2/rest/setPriorityCfValuesInJira",
                    type: 'POST',
                    data: {
                        jsontable: JSON.stringify(table),
                        gmyOrBirim : gmyOrBirim
                    },
                    async: true,
                    beforeSend: function () {
                        console.log("234 beforeSend")
                    },
                    complete: function (response) {
                        console.log("234 complete")
                    },
                    error: function (response) {
                        console.log("setPriorityCfValuesInJira has finished with ERROR !!!");
                    },
                    success: function (response, status, jqXHR) {
                        console.log("setPriorityCfValuesInJira is successful");
                        window.location.reload();
                    }
                });
            }

            function bulkGetCfValuesFromIssue(issueKeys, customfieldId){
                var value="-";
                jQuery.ajax({
                    url: AJS.params.baseURL + "/rest/florestservice/1.2/rest/bulkGetCfValueFromIssue",
                    type: 'POST',
                    data: {
                        issueKey: issueKeys,
                        customFieldId: customfieldId
                    },
                    async: false,
                    beforeSend: function () {
                        console.log("178 beforeSend")
                    },
                    error : function (response) {
                        value= "-";
                    },
                    success: function (response, status, jqXHR) {
                        console.log("getCfValueFromIssue complete");
                        window.scrollTo({
                            left: 20000,top: 300,
                            behavior: 'smooth',
                        });
                        value= response;
                    }
                });
                return value;
            }
            function updatePriorities(restriction) {
                var i = 0;
                var tableBody = AJS.$('#tableBody > tr');
                tableBody.each(function () {
                    if (restriction === "gmy") {
                        AJS.$(this).find(".gmyPriority").text(i + 1);
                    } else if (restriction === "dp") {
                        AJS.$(this).find(".birimOncelik").text(i + 1);
                    }else {
                        AJS.$(this).find(".birimOncelik").text(i + 1);
                        AJS.$(this).find(".gmyPriority").text(i + 1);
                    }
                    i++;
                });
                console.log("Priorities are updated (Not in JIRA DB))");
            }
        });
    </script>


</head>
<body>
    #if( $issues.isEmpty() )
    <div class="aui-group">
        <div class="aui-help aui-help-empty-state">
            <div class="aui-help-content">
                <h1>Proje Önceliklendirme</h1>
                <p>Önceliklendirme yapılacak proje bulunamadı.</p>
            </div>
        </div>
    </div>
    #else
    <div class="aui-group">
        <div class="aui-help aui-help-empty-state">
            <div class="aui-help-content">
                <h1>Proje Önceliklendirme</h1>
                <p>Projeleri sürekle-bırak yöntemi ile istediğiniz sıraya taşıyınız. Önceliklendirme bittikten sonra kaydet tuşuna basınız.</p>
            </div>
        </div>
    </div>
        
    <div>
        <div class="row">
            <div class="col-xs-6 col-md-4">
                <div class="aui-group">
                    <div class="aui-item" id="#select2-customFields">
                        <form class="aui">
                            <select id="customFieldList-select2" data-placeholder="Alan eklemek için tıklayın" multiple>
                                <option></option>
                                #foreach($cf in $customFieldsInProject)
                                    <option value="$cf.getId()">$cf.getName()</option>
                                #end
                            </select>
                        </form>
                    </div>
                </div>
            </div>
            <div class="col-xs-6 col-md-4">
                <div class="aui-group">
                    <div class="aui-item" id="#select2-favFilters">
                        <form class="aui">
                            <select id="favFilter-select2" data-placeholder="Filtre eklemek için tıklayın" size="1">
                                <option>Bir seçenek seçin</option>
                                #foreach($favFilter in $favouriteFilters)
                                    <option value="$favFilter">$favFilter</option>
                                #end
                            </select>
                        </form>
                    </div>
                </div>
            </div>
            <div class="col-xs-6 col-md-4">
                <div class="aui-group" id="buttons">
                    <button class="aui-button aui-button-primary" id="kaydetButton">Kaydet</button>
                </div>
            </div>

        </div>
    </div>

    <div class="aui-group">
        <div id="loading-spinner" class="custom-card-style">
            <p>Loading results...</p>
            <aui-spinner size="large"></aui-spinner>
        </div>
    </div>

    <div class="aui-group list-group" id="tableDiv">
        <table class="aui aui-table-list" id="auiTable" >
            <thead>
                <tr id="tableHeader">
                    <th class="aui-table-column-issue-key" data-override="key"  id="row1">Kayıt Anahtarı</th>
                    <th data-override="Summary" style="font-weight:bold;" id="row1">Özet</th>
                    <th class="aui-table-column-unsortable" data-override="Description"  id="row1">Açıklama</th>
                    <th class="aui-table-column-priority" data-override="Priority"  id="row1">Öncelik</th>
                    <th class="aui-table-column-unsortable" data-override="Created" id="row1">Oluşturulma Tarihi</th>
                    <th class="aui-table-column-unsortable" data-override="Due" id="row1">Bitiş Tarihi</th>
                    #foreach($cf in $customFieldsInProject)
                        <th style="font-weight: bold;" data-override="$cf.getId()">$cf.getName()</th>
                    #end
                </tr>
            </thead>

            <tbody id="tableBody">
                #foreach( $issue in $issueList )
                <tr id="shadow" data-id="$issue.getSummary()">
                    <td id="issueKey" name="issueKey"><a href="$baseUrl/browse/$issue.getKey()" class="issueKey">$issue.getKey()</a></td>
                    <td id="issueSummary" name="issueSummary">$issue.getSummary()</td>
                    <td id="issueDescription" name="issueDescription" class="might-overflow">
                        #if ( !$issue.getDescription() )
                            -
                        #else
                            $issue.getDescription()
                        #end
                    </td>
##                    <td data-id="issuePriority" id="issuePriority" name="issuePriority" class="might-overflow">-</td>
                    <td id="issuePriority" name="issuePriority" class="might-overflow">-</td>
                    <td id="issueCreated" name="issueCreated" class="might-overflow">$issue.getCreated()</td>
                    <td id="issueDue" name="issueDue" class="might-overflow">
                        #if ( !$issue.getDueDate() )
                            -
                        #else
                            $issue.getDueDate()
                        #end
                    </td>
                    #foreach($cf in $customFieldsInProject)
##                        <td id="$cf.getId()" name="$cf.getId()"  style="display:none;" class="$cf.getId()">-</td>
                        <td id="$cf.getId()" name="$cf.getId()" class="$cf.getId()">-</td>
                    #end
                </tr>
                #end
            </tbody>
        </table>

        <br><br>
        <p style="display:inline">Kaynakk: </p>
        <p id="kaynakMiktari" style="display:inline"></p>
    </div>

    #end
</body>
</html>